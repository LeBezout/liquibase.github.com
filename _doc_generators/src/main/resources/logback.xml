<configuration>

  <!-- This creates an appender (a place for log messages to go), names it "STDOUT"
  and says that this appender uses the built-in ConsoleAppender, which writes to the
  standard output stream. It can also be configured to write to standard error. -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- This filter prevents logging messages below the given level from being written
    to the appender. -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <!-- By default, the console appender shows messages at the INFO level or above. Change as needed. -->
      <level>INFO</level>
    </filter>

    <!-- Encoders determine what the output looks like. For the STDOUT logger we are
    just going to show the log level and the message, followed by a newline -->
    <encoder>
      <pattern>%-5level - %msg%n</pattern>
    </encoder>
  </appender>

  <!-- This creates a second appender, names it "FILE" and says that it WILL be using
  the built-in RollingFileAppender. That appender writes to a file, and then
  periodically archives old logs. The rolling strategy is completely configurable -->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- The name of the 'base' log file. No path is given, so the file will be located
    in the 'current' directory. For the GUI, that means that the file will be in the
    installation directory. For the REPL, this will be whatever directory the REPL was
    started from. Note that this means there may be many liquibase-docgenerator.log files scattered
    around the user's disk. Users may want to do this differently. -->
    <file>liquibase-docgenerator.log</file>

    <!-- As with the console appender above, this filters out messages below the given
    level. That means that DEBUG messages will be shown, but not TRACE messages. -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>DEBUG</level>
    </filter>

    <!-- This configures the rolling policy to create a new log file each day, naming the
    'rolled' file 'liquibase-docgenerator-2016-01-23.log' or similar, and to keep at most 30 days
    worth of log files. -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- daily rollover -->
      <fileNamePattern>liquibase-docgenerator.%d{yyyy-MM-dd}.log</fileNamePattern>

      <!-- keep 30 days' worth of history -->
      <maxHistory>30</maxHistory>
    </rollingPolicy>

    <!-- This encoder is identical to the one used above by the console appender -->
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <!-- This configures what is called the 'root' logger. Logback allows for a hierarchy
  of loggers, making it possible for different loggers in the code to send output to
  zero, one, or many different destinations. We set the default log level to 'DEBUG',
  and then reference both of the named appenders. It would be possible to refer to named
  loggers here, so that, for instance, all the messages from the
  com.datical.hammer.core package (and sub-packages) went to a specific appender, and
  all the messages from another package went to a different appender. -->
  <root level="debug">
    <appender-ref ref="STDOUT" />
    <appender-ref ref="FILE" />
  </root>

</configuration>
